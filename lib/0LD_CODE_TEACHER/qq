import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';

class Quizzes extends StatefulWidget {
  final String userId;
  final String grade;
  final String classroomID;

  const Quizzes({
    Key? key,
    required this.userId,
    required this.grade,
    required this.classroomID,
  }) : super(key: key);

  @override
  State<Quizzes> createState() => _QuizzesState();
}

class _QuizzesState extends State<Quizzes> {
  String classCode = "";
  String teacherID = "";
  List<String> title = [];
  List<String> deadline = [];
  Map<String, dynamic> completedQuiz = {};
  int overall = 0;

  @override
  void initState() {
    super.initState();
    quiz();
  }

  void quiz() async {
    try {
      DocumentSnapshot classroomSnapshot = await FirebaseFirestore.instance
          .collection('classroom')
          .doc(widget.classroomID)
          .get();

      if (!classroomSnapshot.exists) {
        print('No documents found for students in classroom');
        return;
      }

      Map<String, dynamic> classroomData = classroomSnapshot.data() as Map<String, dynamic>;
      if (classroomData['Class Code'] != null && classroomData['Teacher'] != null) {
        classCode = classroomData['Class Code'];
        teacherID = classroomData['Teacher'];
        getQuizzes();
        getCompletedQuizzes();
      } else {
        print('No Class Code');
      }
    } catch (e) {
      print('Error fetching classroom data: $e');
    }
  }

  void getQuizzes() async {
    try {
      DocumentSnapshot quizSnapshot = await FirebaseFirestore.instance
          .collection('classQuiz')
          .doc(teacherID + classCode)
          .get();

      if (!quizSnapshot.exists) {
        print('Document does not exist for students in classroomQuiz');
        return;
      }

      Map<String, dynamic> quizData = quizSnapshot.data() as Map<String, dynamic>;
      if (quizData['quiz'] != null) {
        List<dynamic> quizIds = quizData['quiz'];
        for (var quizId in quizIds) {
          DocumentSnapshot quizDetailSnapshot = await FirebaseFirestore.instance
              .collection('quiz')
              .doc(quizId)
              .get();
          if (quizDetailSnapshot.exists) {
            Map<String, dynamic> quizDetail = quizDetailSnapshot.data() as Map<String, dynamic>;
            title.add(quizDetail['title'] ?? '');
            deadline.add(quizDetail['deadline'] ?? '');
            overall = quizDetail['quiz'].length;
          }
        }
      }
    } catch (e) {
      print('Error fetching quiz data: $e');
    }
    setState(() {});
  }

  void getCompletedQuizzes() async {
    try {
      DocumentSnapshot completedQuizSnapshot = await FirebaseFirestore.instance
          .collection('quizScore')
          .doc(widget.userId + classCode)
          .get();

      if (completedQuizSnapshot.exists) {
        completedQuiz = completedQuizSnapshot.data() as Map<String, dynamic>;
      }
      setState(() {});
    } catch (e) {
      print('Error fetching completed quiz data: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quizzes'),
      ),
      body: DefaultTabController(
        length: 3,
        child: Column(
          children: [
            TabBar(
              tabs: [
                Tab(text: 'Upcoming'),
                Tab(text: 'Completed'),
                Tab(text: 'Past due'),
              ],
            ),
            Expanded(
              child: TabBarView(
                children: [
                  buildTab(title, deadline, false),
                  buildTab(title, deadline, true),
                  buildTab(title, deadline, false, pastDue: true),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildTab(List<String> titles, List<String> deadlines, bool completed, {bool pastDue = false}) {
    return ListView.builder(
      itemCount: titles.length,
      itemBuilder: (context, index) {
        final isCompleted = completedQuiz.containsKey(titles[index]);
        final isPastDue = DateTime.parse(deadlines[index]).isBefore(DateTime.now());

        if (isCompleted == completed && (isPastDue == pastDue || !pastDue)) {
          return ListTile(
            title: Text(titles[index]),
            subtitle: Text(deadlines[index]),
            trailing: isCompleted
                ? Text('${completedQuiz[titles[index]]}/$overall')
                : Icon(Icons.close, color: Colors.red),
            onTap: () {
              if (!isCompleted) {
                // Navigate to quiz screen
                // You can add the navigation logic here
              }
            },
          );
        } else {
          return SizedBox.shrink();
        }
      },
    );
  }
}
